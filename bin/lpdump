#!/icg/bin/perl

use LiquidPlanner;
use Getopt::Std;

my %opt;
usage() unless getopts('iw:', \%opt);
my $default_wsid = $opt{w} || $ENV{LIQUIDPLANNER_WORKSPACE};

my $lp = LiquidPlanner->new(autofail => 1);
$lp->{debug} = $ENV{DEBUG};
$lp->set_default_workspace_id($default_wsid) if $default_wsid;

#unless ($lp->is_known_type($type)) {
#  warn "Unknown object type '$type'\n";
#  warn "Known types are: ", join(" ", sort $lp->known_types), "\n";
#  exit 1;
#}

my $option = $opt{i} ? { include_tasks => true } : { } ;
my $obj = is_even(@ARGV) ? $lp->get_object(@ARGV, $option) : $lp->get_objects(@ARGV, $option);
show($obj);

sub show {
  my $obj = shift;
  if (ref $obj eq "HASH") {
    print show_obj($obj), "\n";
  } elsif (ref $obj eq "ARRAY") {
    print show_obj($_), "\n" for @$obj;
  } else {
    die "Don't know how to show $obj; aborting";
  }
}

sub show_obj {
  my $obj = shift;
  my $maxlen = max(map length, keys %$obj);
  my $out = "";
  for my $k  (sort keys %$obj) {
    my $val = $obj->{$k};
    if (ref $val eq "ARRAY") {
      $val = join ", ", @$val;
      $val = "[$val]";
    }
    $out .= sprintf("%*s   %s\n", $maxlen, $k, $val);
  }
  return $out;
}

sub max {
  my $max = shift;
  $max = $max > $_ ? $max : $_ for @_;
  return $max;
}

sub is_even($) {
  $_[0] % 2 == 0;
}
