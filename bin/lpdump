#!/icg/bin/perl

use LiquidPlanner;
use Getopt::Std;
use Sort::ByExample;
use strict; 

my %opt;
usage() unless getopts('RCtw:', \%opt);

my $keysort = Sort::ByExample::sbe(['id'], sub { $_[0] cmp $_[1] });

my $default_wsid = $opt{w} || $ENV{LIQUIDPLANNER_WORKSPACE};

my $lp = LiquidPlanner->new(autofail => 1);
$lp->{debug} = $ENV{DEBUG};
$lp->set_default_workspace_id($default_wsid) if $default_wsid;

#unless ($lp->is_known_type($type)) {
#  warn "Unknown object type '$type'\n";
#  warn "Known types are: ", join(" ", sort $lp->known_types), "\n";
#  exit 1;
#}

my $option = {};
$option->{include_tasks} = "true" if $opt{t};
$option->{include_children} = "immediate" if $opt{C};
$option->{include_children} = "all" if $opt{R};
my $obj = is_even(@ARGV) ? $lp->get_object($option, @ARGV) : $lp->get_objects($option, @ARGV);
show($obj);

sub show {
  my $obj = shift;
  print obj_to_lines($obj);
}

sub obj_to_lines {
  my $obj = shift;
  my $indent1 = shift || "";  # first line indent
  my $indent = shift || "";   # subsequent lines indent
  if (ref $obj eq "ARRAY") {
    if (@$obj == 0) { return $indent1 . "[ ]\n" }
    my ($item1, @rest) = @$obj;
    my @lines = obj_to_lines($item1, "$indent1\[ ", "$indent| ");
    push @lines,  map obj_to_lines($_, "$indent| ", "$indent| "), @rest;
    push @lines, "$indent\] \n";
    return @lines;
  } elsif (ref $obj eq "HASH") {
    my $maxlen = max(map length, keys %$obj);
    my @lines;
    push @lines, "$indent1\{\n";
    for my $k ($keysort->(keys %$obj)) {
      my $keystr = $indent . sprintf("  %*s  ", $maxlen, $k);
      push @lines, obj_to_lines($obj->{$k}, $keystr, " " x length($keystr));
    }
    push @lines, "$indent\}\n";
    return @lines;
  } else {
    my $str = $obj;
    $str =~ s/\n/\\n/g;
    $str =~ s/\r/\\r/g;
    $str =~ s/\t/\\t/g;
    return $indent1 . $str . "\n";
  }
}

sub max {
  my $max = shift;
  $max = $max > $_ ? $max : $_ for @_;
  return $max;
}

sub is_even($) {
  $_[0] % 2 == 0;
}
